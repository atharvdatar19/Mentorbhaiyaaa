import React, { useState, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { User } from "@/entities/User";
import {
  Home,
  BookOpen,
  Brain,
  TrendingUp,
  Calendar,
  GraduationCap,
  Target,
  ChevronDown,
  Settings,
  Users,
  MessageSquare,
  Briefcase,
  Award,
  ShieldCheck,
  Bookmark,
  LogOut } from
"lucide-react";
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarHeader,
  SidebarFooter,
  SidebarProvider,
  SidebarTrigger } from
"@/components/ui/sidebar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Dialog, DialogTrigger, DialogContent } from "@/components/ui/dialog";
import SettingsModal from "@/components/settings/SettingsModal";

const navigationItems = [
{ title: "Dashboard", url: createPageUrl("Dashboard"), icon: Home },
{ title: "Career Assessment", url: createPageUrl("CareerAssessment"), icon: Brain },
{ title: "Stream Selector", url: createPageUrl("StreamSelector"), icon: BookOpen },
{ title: "College Directory", url: createPageUrl("CollegeDirectory"), icon: GraduationCap },
{ title: "Timeline", url: createPageUrl("Timeline"), icon: Calendar },
{ title: "Find a Mentor", url: createPageUrl("Mentors"), icon: Users },
{ title: "My Bookings", url: createPageUrl("MyBookings"), icon: Bookmark },
{ title: "Study Materials", url: createPageUrl("Subjects"), icon: BookOpen },
{ title: "Doubt Forum", url: createPageUrl("Doubts"), icon: MessageSquare },
{ title: "My Goals", url: createPageUrl("Goals"), icon: Target },
{ title: "Progress", url: createPageUrl("Progress"), icon: TrendingUp }];


const examTypes = ["JEE", "NEET", "NDA", "Class_10", "Class_12", "CLAT", "VITEEE", "MHTCET", "GUJCET", "None"];

export default function Layout({ children, currentPageName }) {
  const location = useLocation();
  const [user, setUser] = useState(null);
  const [goal, setGoal] = useState("None");
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const currentUser = await User.me();
        setUser(currentUser);
        setGoal(currentUser.primary_exam_goal || "None");
      } catch (e) {


        // Not logged in
      }};fetchUser();
  }, []);

  const handleGoalChange = async (newGoal) => {
    setGoal(newGoal);
    if (user) {
      await User.updateMyUserData({ primary_exam_goal: newGoal });
    }
  };

  const handleLogout = async () => {
    await User.logout();
    window.location.reload();
  };

  return (
    <SidebarProvider>
      <style>{`
        :root {
          --primary-blue-deep: #0c2a5d;
          --primary-blue: #1e40af;
          --accent-teal: #0d9488;
          --accent-green: #10b981;
          --soft-bg: #f7f9fc;
          --text-primary: #111827;
          --text-secondary: #4b5563;
        }
      `}</style>
      <div className="min-h-screen flex w-full bg-soft-bg">
        <Sidebar className="border-r border-slate-200/60 bg-white/90 backdrop-blur-lg">
          <SidebarHeader className="border-b border-slate-200/60 p-4">
            <div className="flex items-center gap-3">
              <img src="https://qtrypzzcjebvfcihiynt.supabase.co/storage/v1/object/public/base44-prod/public/68b276d48626205b99d1f6d7/947f73cae_WhatsAppImage2025-09-07at144726_4a5913e6.jpg" alt="Mentorbhaiyaaa Logo" className="w-10 h-10 rounded-lg object-cover shadow-lg" />
              <div>
                <h2 className="font-bold text-text-primary text-lg">Mentorbhaiyaaa</h2>
                <p className="text-xs text-text-secondary">Career Advisor</p>
              </div>
            </div>
          </SidebarHeader>

          <SidebarContent className="p-3">
            {/* ... Sidebar Menu ... */}
            <SidebarGroup className="mb-4">
              <SidebarGroupContent>
                <SidebarMenu className="space-y-1">
                  {navigationItems.map((item) =>
                  <SidebarMenuItem key={item.title}>
                      <SidebarMenuButton
                      asChild
                      className={`group transition-all duration-300 rounded-lg ${
                      location.pathname === item.url ?
                      'bg-primary-blue text-white shadow-md shadow-blue-500/30' :
                      'hover:bg-slate-100 text-text-secondary hover:text-text-primary'}`
                      }>

                        <Link to={item.url} className="bg-slate-50 text-slate-900 px-3 py-2.5 text-sm peer/menu-button flex w-full items-center gap-2 overflow-hidden outline-none ring-sidebar-ring focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 h-8 group transition-all duration-300 rounded-lg hover:bg-slate-100 hover:text-text-primary hover:bg-sidebar-accent hover:text-sidebar-accent-foreground shadow-md shadow-blue-500/30 gap-3">
                          <item.icon className={`w-5 h-5 transition-transform duration-300 group-hover:scale-110 ${
                        location.pathname === item.url ? 'text-white' : 'text-slate-400 group-hover:text-slate-600'}`
                        } />
                          <span className="font-medium text-sm">{item.title}</span>
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                  )}
                  {user?.role === 'admin' &&
                  <SidebarMenuItem>
                      <SidebarMenuButton
                      asChild
                      className={`group transition-all duration-300 rounded-lg ${
                      location.pathname === createPageUrl("AdminPanel") ?
                      'bg-primary-blue text-white shadow-md shadow-blue-500/30' :
                      'hover:bg-slate-100 text-text-secondary hover:text-text-primary'}`
                      }>

                        <Link to={createPageUrl("AdminPanel")} className="flex items-center gap-3 px-3 py-2.5">
                          <ShieldCheck className={`w-5 h-5 transition-transform duration-300 group-hover:scale-110 ${
                        location.pathname === createPageUrl("AdminPanel") ? 'text-white' : 'text-slate-400 group-hover:text-slate-600'}`
                        } />
                          <span className="font-medium text-sm">Admin Panel</span>
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                  }
                </SidebarMenu>
              </SidebarGroupContent>
            </SidebarGroup>

            <SidebarGroup>
              <SidebarGroupLabel className="text-xs font-semibold text-slate-400 uppercase tracking-wider px-3 py-2">
                Primary Goal
              </SidebarGroupLabel>
              <SidebarGroupContent className="px-3">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" className="w-full justify-between items-center text-left h-11 border-slate-200 hover:bg-slate-50">
                      <div className="flex items-center gap-2">
                        <Award className="w-4 h-4 text-accent-teal" />
                        <span className="font-medium text-text-primary">{goal.replace('_', ' ')}</span>
                      </div>
                      <ChevronDown className="w-4 h-4 text-slate-400" />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-56 p-1">
                    {examTypes.map((exam) =>
                    <div key={exam} onClick={() => handleGoalChange(exam)} className="text-sm font-medium text-text-secondary rounded-md px-3 py-2 hover:bg-slate-100 cursor-pointer">
                        {exam.replace('_', ' ')}
                      </div>
                    )}
                  </PopoverContent>
                </Popover>
              </SidebarGroupContent>
            </SidebarGroup>
          </SidebarContent>

          <SidebarFooter className="border-t border-slate-200/60 p-4 space-y-2">
             <Dialog open={isSettingsOpen} onOpenChange={setIsSettingsOpen}>
                <DialogTrigger asChild>
                    <Button variant="ghost" className="w-full justify-start gap-3 text-text-secondary">
                      <Settings className="w-5 h-5" />
                      <span className="font-medium text-sm">Settings</span>
                    </Button>
                </DialogTrigger>
                <DialogContent>
                    <SettingsModal user={user} onUserUpdate={(updatedUser) => setUser(updatedUser)} />
                </DialogContent>
             </Dialog>
             <Button variant="ghost" onClick={handleLogout} className="w-full justify-start gap-3 text-red-500 hover:text-red-600">
                <LogOut className="w-5 h-5" />
                <span className="font-medium text-sm">Logout</span>
             </Button>
          </SidebarFooter>
        </Sidebar>

        <main className="flex-1 flex flex-col">
          <header className="bg-white/80 backdrop-blur-sm border-b border-slate-200/60 px-6 py-4 md:hidden">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <SidebarTrigger className="hover:bg-slate-100 p-2 rounded-lg transition-colors duration-200" />
                <h1 className="text-xl font-bold text-text-primary">Mentorbhaiyaaa</h1>
              </div>
              <Dialog open={isSettingsOpen} onOpenChange={setIsSettingsOpen}>
                <DialogTrigger asChild>
                    <Button variant="ghost" size="icon"><Settings className="w-5 h-5" /></Button>
                </DialogTrigger>
                <DialogContent>
                    <SettingsModal user={user} onUserUpdate={(updatedUser) => setUser(updatedUser)} />
                </DialogContent>
             </Dialog>
            </div>
          </header>

          <div className="flex-1 overflow-auto">
            {children}
          </div>
        </main>
      </div>
    </SidebarProvider>);

}
