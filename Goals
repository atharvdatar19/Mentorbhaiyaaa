import React, { useState, useEffect } from 'react';
import { Goal } from '@/entities/Goal';
import { motion } from 'framer-motion';
import { Plus, Target, Edit, Trash2, Check, CheckCircle, ChevronDown, ChevronUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import GoalForm from '@/components/goals/GoalForm';

const categoryColors = {
  academic: 'bg-blue-100 text-blue-800',
  skill: 'bg-green-100 text-green-800',
  career: 'bg-purple-100 text-purple-800',
  personal: 'bg-amber-100 text-amber-800',
};

const motivationalQuotes = [
    "The secret of getting ahead is getting started.",
    "Believe you can and you're halfway there.",
    "The future depends on what you do today.",
    "Set a goal that makes you want to jump out of bed in the morning."
];

function MilestoneTracker({ goal, onUpdate }) {
    const [milestones, setMilestones] = useState(goal.milestones || []);
    const [showAll, setShowAll] = useState(false);

    const toggleMilestone = async (index) => {
        const newMilestones = [...milestones];
        newMilestones[index].completed = !newMilestones[index].completed;
        
        const completedCount = newMilestones.filter(m => m.completed).length;
        const newProgress = Math.round((completedCount / newMilestones.length) * 100);

        setMilestones(newMilestones);
        await onUpdate({ milestones: newMilestones, progress_percentage: newProgress });
    };

    const visibleMilestones = showAll ? milestones : milestones.slice(0, 3);

    return (
        <div className="mt-4">
            <h4 className="font-semibold text-text-primary mb-2">Milestones</h4>
            <div className="space-y-2">
                {visibleMilestones.map((milestone, index) => (
                    <div 
                        key={index} 
                        className={`flex items-center gap-3 p-2 rounded-lg cursor-pointer transition-colors ${milestone.completed ? 'bg-green-50 text-slate-500' : 'bg-slate-50'}`}
                        onClick={() => toggleMilestone(index)}
                    >
                        <div className={`w-5 h-5 rounded-full flex items-center justify-center border-2 ${milestone.completed ? 'bg-green-500 border-green-500' : 'border-slate-300'}`}>
                           {milestone.completed && <Check className="w-3 h-3 text-white" />}
                        </div>
                        <span className={`flex-grow ${milestone.completed ? 'line-through' : ''}`}>{milestone.title}</span>
                    </div>
                ))}
            </div>
            {milestones.length > 3 && (
                <Button variant="link" size="sm" onClick={() => setShowAll(!showAll)} className="mt-2 text-primary-blue">
                    {showAll ? 'Show Less' : `Show ${milestones.length - 3} more`}
                    {showAll ? <ChevronUp className="w-4 h-4 ml-1" /> : <ChevronDown className="w-4 h-4 ml-1" />}
                </Button>
            )}
        </div>
    );
}


export default function GoalsPage() {
  const [goals, setGoals] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingGoal, setEditingGoal] = useState(null);
  const [quote, setQuote] = useState('');

  useEffect(() => {
    loadGoals();
    setQuote(motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)]);
  }, []);

  const loadGoals = async () => {
    setIsLoading(true);
    try {
      const userGoals = await Goal.list('-priority');
      setGoals(userGoals);
    } catch (error) {
      console.error('Failed to load goals:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = (goal) => {
    setEditingGoal(goal);
    setIsFormOpen(true);
  };

  const handleDelete = async (goalId) => {
    if (window.confirm('Are you sure you want to delete this goal?')) {
      try {
        await Goal.delete(goalId);
        loadGoals();
      } catch (error) {
        console.error('Failed to delete goal:', error);
      }
    }
  };

  const handleGoalUpdate = async (goal, updates) => {
    try {
        await Goal.update(goal.id, updates);
        loadGoals();
    } catch (error) {
        console.error("Failed to update goal:", error);
    }
  };

  const handleFormSubmit = () => {
    setIsFormOpen(false);
    setEditingGoal(null);
    loadGoals();
  };

  if (isLoading) {
    return (
      <div className="p-4 md:p-8 min-h-screen bg-soft-bg animate-pulse">
        <div className="max-w-6xl mx-auto">
          <div className="h-10 bg-slate-200 rounded w-1/3 mb-2"></div>
          <div className="h-6 bg-slate-200 rounded w-1/2 mb-8"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(3)].map((_, i) => <div key={i} className="h-64 bg-slate-200 rounded-2xl"></div>)}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-4">
          <div>
            <div className="flex items-center gap-3 mb-2">
              <Target className="w-8 h-8 text-primary-blue" />
              <h1 className="text-3xl md:text-4xl font-bold text-text-primary">My Goals</h1>
            </div>
            <p className="text-text-secondary text-lg italic">"{quote}"</p>
          </div>
          <Button onClick={() => { setEditingGoal(null); setIsFormOpen(true); }} className="bg-primary-blue hover:bg-primary-blue-deep gap-2">
            <Plus className="w-4 h-4" />
            Set New Goal
          </Button>
        </div>

        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>{editingGoal ? 'Edit Goal' : 'Create a New Goal'}</DialogTitle>
            </DialogHeader>
            <GoalForm goal={editingGoal} onSubmitSuccess={handleFormSubmit} />
          </DialogContent>
        </Dialog>

        {goals.length === 0 ? (
          <div className="text-center py-16 bg-white/60 rounded-2xl mt-8">
            <Target className="w-16 h-16 mx-auto mb-4 text-slate-400" />
            <h3 className="text-xl font-semibold text-text-primary">No Goals Set Yet</h3>
            <p className="text-text-secondary">Click 'Set New Goal' to start planning your success.</p>
          </div>
        ) : (
          <div className="mt-8 grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 space-y-6">
                <h2 className="text-2xl font-bold text-text-primary">Active Goals</h2>
                {goals.filter(g => g.status !== 'completed').map((goal, index) => (
                  <motion.div key={goal.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.05 * index }}>
                    <Card className="shadow-lg border-0 bg-white/60 backdrop-blur-lg hover:shadow-xl transition-all duration-300">
                      <CardHeader>
                        <div className="flex justify-between items-start">
                          <CardTitle className="text-lg font-bold text-text-primary">{goal.title}</CardTitle>
                          <Badge className={categoryColors[goal.category]}>{goal.category}</Badge>
                        </div>
                        <p className="text-xs text-text-secondary">Target: {new Date(goal.target_date).toLocaleDateString()}</p>
                      </CardHeader>
                      <CardContent>
                        <p className="text-sm text-text-secondary mb-4">{goal.description}</p>
                        <Progress value={goal.progress_percentage} className="h-3" />
                        <div className="flex justify-between items-center mt-2">
                          <span className="text-sm font-medium text-text-primary">{goal.progress_percentage}% complete</span>
                        </div>
                        {(goal.milestones && goal.milestones.length > 0) && (
                            <MilestoneTracker goal={goal} onUpdate={(updates) => handleGoalUpdate(goal, updates)} />
                        )}
                      </CardContent>
                      <CardFooter className="flex justify-end gap-2 p-4 bg-slate-50/50 border-t border-slate-200/60">
                        <Button variant="ghost" size="icon" onClick={() => handleEdit(goal)}><Edit className="w-4 h-4" /></Button>
                        <Button variant="ghost" size="icon" className="text-red-500 hover:text-red-600" onClick={() => handleDelete(goal.id)}><Trash2 className="w-4 h-4" /></Button>
                      </CardFooter>
                    </Card>
                  </motion.div>
                ))}
            </div>
            <div className="lg:col-span-1">
                 <h2 className="text-2xl font-bold text-text-primary mb-6">Completed</h2>
                 <div className="space-y-4">
                    {goals.filter(g => g.status === 'completed').map(goal => (
                        <Card key={goal.id} className="bg-green-50 border-green-200">
                            <CardContent className="p-4 flex items-center gap-3">
                                <CheckCircle className="w-6 h-6 text-green-600" />
                                <div>
                                    <p className="font-semibold text-green-800">{goal.title}</p>
                                    <p className="text-xs text-green-700">Completed on {new Date(goal.updated_date).toLocaleDateString()}</p>
                                </div>
                            </CardContent>
                        </Card>
                    ))}
                    {goals.filter(g => g.status === 'completed').length === 0 && (
                        <p className="text-sm text-center text-text-secondary pt-8">No completed goals yet. Keep going!</p>
                    )}
                 </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
