import React, { useState, useEffect } from 'react';
import { PlannerEvent } from '@/entities/PlannerEvent';
import { motion } from 'framer-motion';
import { Calendar, Plus } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { format, startOfWeek, endOfWeek, eachDayOfInterval, addDays, subDays } from 'date-fns';

const categories = {
    study: 'bg-blue-500',
    test: 'bg-purple-500',
    deadline: 'bg-red-500',
    personal: 'bg-green-500',
    mentoring: 'bg-amber-500',
}

function EventForm({ onEventAdded, eventDate }) {
    const [title, setTitle] = useState('');
    const [category, setCategory] = useState('study');
    const [startTime, setStartTime] = useState('09:00');
    const [endTime, setEndTime] = useState('10:00');

    const handleSubmit = async (e) => {
        e.preventDefault();
        const startDateTime = new Date(eventDate);
        const [startHour, startMinute] = startTime.split(':');
        startDateTime.setHours(startHour, startMinute);

        const endDateTime = new Date(eventDate);
        const [endHour, endMinute] = endTime.split(':');
        endDateTime.setHours(endHour, endMinute);

        await PlannerEvent.create({
            title,
            category,
            start_time: startDateTime.toISOString(),
            end_time: endDateTime.toISOString(),
        });
        onEventAdded();
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4 p-4">
            <input type="text" value={title} onChange={e => setTitle(e.target.value)} placeholder="Event Title" className="w-full p-2 border rounded" required/>
            <select value={category} onChange={e => setCategory(e.target.value)} className="w-full p-2 border rounded">
                {Object.keys(categories).map(cat => <option key={cat} value={cat}>{cat.charAt(0).toUpperCase() + cat.slice(1)}</option>)}
            </select>
            <div className="flex gap-4">
                <input type="time" value={startTime} onChange={e => setStartTime(e.target.value)} className="w-full p-2 border rounded" />
                <input type="time" value={endTime} onChange={e => setEndTime(e.target.value)} className="w-full p-2 border rounded" />
            </div>
            <Button type="submit" className="w-full bg-primary-blue hover:bg-primary-blue-deep">Add Event</Button>
        </form>
    )
}


export default function PlannerPage() {
    const [events, setEvents] = useState([]);
    const [currentDate, setCurrentDate] = useState(new Date());
    const [isFormOpen, setIsFormOpen] = useState(false);
    const [selectedDate, setSelectedDate] = useState(new Date());

    useEffect(() => { loadEvents() }, [currentDate]);

    const loadEvents = async () => {
        const weekStart = startOfWeek(currentDate, { weekStartsOn: 1 });
        const weekEnd = endOfWeek(currentDate, { weekStartsOn: 1 });
        const data = await PlannerEvent.filter({
            start_time: { '$gte': weekStart.toISOString() },
            end_time: { '$lte': weekEnd.toISOString() }
        });
        setEvents(data);
    };
    
    const weekDays = eachDayOfInterval({
        start: startOfWeek(currentDate, { weekStartsOn: 1 }),
        end: endOfWeek(currentDate, { weekStartsOn: 1 })
    });
    
    return (
        <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
            <div className="max-w-7xl mx-auto">
                <div className="flex justify-between items-center mb-8">
                  <div>
                    <div className="flex items-center gap-3 mb-2">
                      <Calendar className="w-8 h-8 text-primary-blue" />
                      <h1 className="text-3xl md:text-4xl font-bold text-text-primary">Weekly Planner</h1>
                    </div>
                    <div className="flex items-center gap-4">
                        <Button onClick={() => setCurrentDate(subDays(currentDate, 7))}>Previous</Button>
                        <span className="font-bold text-lg text-text-primary">{format(currentDate, 'MMMM yyyy')}</span>
                        <Button onClick={() => setCurrentDate(addDays(currentDate, 7))}>Next</Button>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-7 gap-1 bg-white p-2 rounded-2xl shadow-lg">
                    {weekDays.map(day => {
                        const dayEvents = events.filter(e => format(new Date(e.start_time), 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd'));
                        return (
                            <div key={day.toString()} className="border-r border-slate-100 last:border-r-0 p-2">
                                <div className="text-center mb-2">
                                    <p className="text-sm text-text-secondary">{format(day, 'EEE')}</p>
                                    <p className={`font-bold text-lg ${format(day, 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd') ? 'text-primary-blue' : 'text-text-primary'}`}>{format(day, 'd')}</p>
                                </div>
                                <div className="space-y-1 h-96 overflow-y-auto">
                                    {dayEvents.map(event => (
                                        <div key={event.id} className={`${categories[event.category]} text-white p-1.5 rounded text-xs`}>
                                            <p className="font-bold truncate">{event.title}</p>
                                            <p>{format(new Date(event.start_time), 'HH:mm')} - {format(new Date(event.end_time), 'HH:mm')}</p>
                                        </div>
                                    ))}
                                </div>
                                 <Dialog>
                                    <DialogTrigger asChild>
                                        <Button variant="ghost" className="w-full mt-2" onClick={() => setSelectedDate(day)}>
                                            <Plus className="w-4 h-4" />
                                        </Button>
                                    </DialogTrigger>
                                    <DialogContent>
                                        <DialogHeader>
                                            <DialogTitle>Add event to {format(day, 'MMMM d')}</DialogTitle>
                                        </DialogHeader>
                                        <EventForm onEventAdded={loadEvents} eventDate={selectedDate}/>
                                    </DialogContent>
                                </Dialog>
                            </div>
                        )
                    })}
                </div>
            </div>
        </div>
    );
}
