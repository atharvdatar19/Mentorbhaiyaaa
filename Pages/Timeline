import React, { useState, useEffect } from "react";
import { Timeline } from "@/entities/Timeline";
import { User } from "@/entities/User";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Calendar, Clock, Bell, ExternalLink, FileText } from "lucide-react";
import { format, isAfter, isBefore, addDays, startOfToday } from "date-fns";

export default function TimelinePage() {
  const [events, setEvents] = useState([]);
  const [userProfile, setUserProfile] = useState(null);
  const [selectedFilter, setSelectedFilter] = useState("All");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadTimeline();
    loadUserProfile();
  }, []);

  const loadTimeline = async () => {
    try {
      const today = startOfToday();
      const data = await Timeline.filter({ start_date: { '$gte': today.toISOString() } }, "start_date");
      setEvents(data);
    } catch (error) {
      console.error("Error loading timeline:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadUserProfile = async () => {
    try {
      const user = await User.me();
      setUserProfile(user);
    } catch (error) {

      // User not logged in
    }};

  const getEventStatus = (event) => {
    const now = new Date();
    const startDate = new Date(event.start_date);

    if (isBefore(now, startDate) && isAfter(startDate, addDays(now, 30))) return "upcoming";
    if (isBefore(now, startDate) && isBefore(startDate, addDays(now, 30))) return "soon";
    return "active";
  };

  const getEventIcon = (eventType) => {
    const icons = {
      admission: Calendar, scholarship: FileText, entrance_exam: Clock, counseling: Bell, application_deadline: ExternalLink, result: Clock
    };
    return icons[eventType] || Calendar;
  };

  const getEventColor = (eventType) => {
    const colors = {
      admission: "bg-blue-100 text-blue-700", scholarship: "bg-green-100 text-green-700", entrance_exam: "bg-red-100 text-red-700", counseling: "bg-purple-100 text-purple-700", application_deadline: "bg-orange-100 text-orange-700", result: "bg-teal-100 text-teal-700"
    };
    return colors[eventType] || "bg-gray-100 text-gray-600";
  };

  const getStatusBadge = (status) => {
    const badges = {
      active: { color: "bg-green-500", text: "Active" },
      soon: { color: "bg-yellow-500", text: "Starting Soon" },
      upcoming: { color: "bg-blue-500", text: "Upcoming" }
    };
    return badges[status];
  };

  const filteredEvents = events.filter((event) => {
    if (selectedFilter === "All") return true;
    if (selectedFilter === "Relevant" && userProfile) {
      return event.target_audience.includes(userProfile.current_class) ||
      event.target_audience.includes("All");
    }
    return event.event_type === selectedFilter;
  });

  if (isLoading) {
    return (
      <div className="p-8 text-center">
        <div className="animate-pulse">Loading Upcoming Events...</div>
      </div>);

  }

  return (
    <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
      <div className="max-w-5xl mx-auto">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <Calendar className="w-8 h-8 text-primary-blue" />
            <h1 className="text-3xl md:text-4xl font-bold text-text-primary">Academic Timeline</h1>
          </div>
          <p className="text-text-secondary text-lg">
            Upcoming admission dates, scholarships, and entrance exams.
          </p>
        </motion.div>

        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="mb-8">
          <div className="flex flex-wrap gap-2">
            {["All", "Relevant", "admission", "scholarship", "entrance_exam", "counseling", "application_deadline", "result"].map((filter) =>
            <Button
              key={filter}
              variant={selectedFilter === filter ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedFilter(filter)} className="bg-primary-blue text-slate-950 px-3 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-9 rounded-md hover:bg-primary-blue-deep">


                {filter.replace("_", " ").replace(/\b\w/g, (l) => l.toUpperCase())}
              </Button>
            )}
          </div>
        </motion.div>

        <div className="space-y-4">
          {filteredEvents.map((event, index) => {
            const IconComponent = getEventIcon(event.event_type);
            const status = getEventStatus(event);
            const statusBadge = getStatusBadge(status);

            return (
              <motion.div
                key={event.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.05 * index }}>

                <Card className={`shadow-lg border-0 bg-white/60 backdrop-blur-lg hover:shadow-xl transition-all duration-300`}>
                  <CardContent className="p-6">
                    <div className="flex gap-4">
                      <div className={`p-3 rounded-xl ${getEventColor(event.event_type, status)}`}>
                        <IconComponent className="w-6 h-6" />
                      </div>
                      <div className="flex-1">
                        <div className="flex justify-between items-start mb-2">
                          <h3 className="text-lg font-bold text-text-primary">{event.title}</h3>
                          <div className={`px-2 py-1 rounded-full text-xs font-bold text-white ${statusBadge.color}`}>
                            {statusBadge.text}
                          </div>
                        </div>
                        
                        <p className="text-text-secondary mb-3">{event.description}</p>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 text-sm">
                          <div className="flex items-center gap-2">
                            <Calendar className="w-4 h-4 text-slate-400" />
                            <span>
                              {format(new Date(event.start_date), 'MMM dd, yyyy')}
                              {event.end_date && ` - ${format(new Date(event.end_date), 'MMM dd, yyyy')}`}
                            </span>
                          </div>
                          {event.location &&
                          <div className="flex items-center gap-2">
                              <Bell className="w-4 h-4 text-slate-400" />
                              <span>{event.location}</span>
                            </div>
                          }
                        </div>
                        
                        <div className="flex flex-wrap gap-2 mb-4">
                          {event.target_audience.map((audience) =>
                          <Badge key={audience} variant="secondary" className="text-xs">
                              {audience.replace("_", " ")}
                            </Badge>
                          )}
                          {event.streams.map((stream) =>
                          <Badge key={stream} variant="outline" className="text-xs">
                              {stream}
                            </Badge>
                          )}
                        </div>
                        
                        {event.registration_link &&
                        <Button asChild className="bg-primary-blue hover:bg-primary-blue-deep" size="sm">
                            <a href={event.registration_link} target="_blank" rel="noopener noreferrer">
                              <ExternalLink className="w-4 h-4 mr-2" />
                              Register Now
                            </a>
                          </Button>
                        }
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>);

          })}
        </div>
      </div>
    </div>);

}
