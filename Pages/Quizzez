import React, { useState, useEffect } from 'react';
import { Quiz } from '@/entities/Quiz';
import { Link } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { motion } from 'framer-motion';
import { Brain, Search } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';

export default function QuizzesPage() {
  const [quizzes, setQuizzes] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({ subject: 'All', difficulty: 'All' });

  useEffect(() => {
    loadQuizzes();
  }, []);

  const loadQuizzes = async () => {
    setIsLoading(true);
    try {
      const data = await Quiz.list();
      setQuizzes(data);
    } catch (error) {
      console.error('Failed to load quizzes:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFilterChange = (type, value) => {
    setFilters((prev) => ({ ...prev, [type]: value }));
  };

  const filteredQuizzes = quizzes.filter((quiz) => {
    return (
      quiz.title.toLowerCase().includes(searchTerm.toLowerCase()) && (
      filters.subject === 'All' || quiz.subject === filters.subject) && (
      filters.difficulty === 'All' || quiz.difficulty === filters.difficulty));

  });

  const subjects = ['All', ...new Set(quizzes.map((q) => q.subject))];
  const difficulties = ['All', 'Easy', 'Medium', 'Hard'];

  if (isLoading) {
    return (
      <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
        <div className="max-w-6xl mx-auto">
          <div className="h-10 bg-slate-200 rounded w-1/3 mb-8 animate-pulse"></div>
          <div className="h-14 bg-slate-200 rounded-2xl mb-8 animate-pulse"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => <div key={i} className="h-56 bg-slate-200 rounded-2xl animate-pulse"></div>)}
          </div>
        </div>
      </div>);

  }

  return (
    <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
      <div className="max-w-6xl mx-auto">
        <div className="flex items-center gap-3 mb-8">
          <Brain className="w-8 h-8 text-primary-blue" />
          <h1 className="text-3xl md:text-4xl font-bold text-text-primary">Practice Quizzes</h1>
        </div>

        <Card className="mb-8 p-4 bg-white/60 backdrop-blur-lg">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="relative md:col-span-1">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-400" />
              <Input placeholder="Search quizzes..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10 h-11" />
            </div>
            <Select value={filters.subject} onValueChange={(v) => handleFilterChange('subject', v)}>
              <SelectTrigger className="h-11"><SelectValue placeholder="Filter by Subject" /></SelectTrigger>
              <SelectContent>{subjects.map((s) => <SelectItem key={s} value={s}>{s}</SelectItem>)}</SelectContent>
            </Select>
            <Select value={filters.difficulty} onValueChange={(v) => handleFilterChange('difficulty', v)}>
              <SelectTrigger className="h-11"><SelectValue placeholder="Filter by Difficulty" /></SelectTrigger>
              <SelectContent>{difficulties.map((d) => <SelectItem key={d} value={d}>{d}</SelectItem>)}</SelectContent>
            </Select>
          </div>
        </Card>

        {filteredQuizzes.length === 0 ?
        <div className="text-center py-16 bg-white/60 rounded-2xl">
            <Brain className="w-16 h-16 mx-auto mb-4 text-slate-400" />
            <h3 className="text-xl font-semibold text-text-primary">No Quizzes Found</h3>
            <p className="text-text-secondary">Try adjusting your search or filters.</p>
          </div> :

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredQuizzes.map((quiz, index) =>
          <motion.div key={quiz.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.05 * index }}>
                <Card className="h-full flex flex-col shadow-lg border-0 bg-white/60 backdrop-blur-lg hover:shadow-xl transition-all duration-300">
                  <CardHeader>
                    <CardTitle className="text-lg font-bold text-text-primary">{quiz.title}</CardTitle>
                    <div className="flex gap-2 pt-2">
                        <Badge variant="secondary">{quiz.subject}</Badge>
                        <Badge variant="outline">{quiz.difficulty}</Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="flex-grow">
                    <p className="text-sm text-text-secondary">
                      {quiz.total_questions} questions â€¢ {quiz.duration_minutes} min
                    </p>
                  </CardContent>
                  <CardFooter className="p-4">
                    <Link to={createPageUrl(`QuizPlayer?id=${quiz.id}`)} className="w-full">
                        <Button className="bg-slate-300 text-slate-950 px-4 py-2 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-10 w-full hover:bg-primary-blue-deep">Start Quiz</Button>
                    </Link>
                  </CardFooter>
                </Card>
              </motion.div>
          )}
          </div>
        }
      </div>
    </div>);

}
