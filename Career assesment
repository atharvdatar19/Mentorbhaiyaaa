import React, { useState, useEffect } from "react";
import { CareerAssessment, CareerProfile } from "@/entities/all";
import { User } from "@/entities/User";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Brain, Target, Clock, ArrowRight, CheckCircle, Search, Loader2, Users } from "lucide-react";
import { Input } from "@/components/ui/input";
import { InvokeLLM } from "@/integrations/Core";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

function CareerExplorer({ assessmentResults }) {
  const [searchTerm, setSearchTerm] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [searchResults, setSearchResults] = useState(null);

  const handleSearch = async (e) => {
    e.preventDefault();
    if (!searchTerm) return;
    setIsSearching(true);
    setSearchResults(null);
    try {
      const userInterests = Object.keys(assessmentResults).join(', ');
      const prompt = `Based on a user's interests in "${userInterests}" and their search for "${searchTerm}", generate a mind map of related careers. For each main career, provide a description, key skills, and a few related sub-careers.`;
      const results = await InvokeLLM({
        prompt,
        response_json_schema: {
          type: 'object',
          properties: {
            careers: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  name: { type: 'string' },
                  description: { type: 'string' },
                  key_skills: { type: 'array', items: { type: 'string' } },
                  sub_careers: { type: 'array', items: { type: 'string' } }
                },
                required: ['name', 'description', 'key_skills']
              }
            }
          },
          required: ['careers']
        }
      });
      setSearchResults(results);
    } catch (err) {
      console.error("AI search failed:", err);
    } finally {
      setIsSearching(false);
    }
  };

  return (
    <div className="mt-8">
        <h2 className="text-2xl font-bold text-center text-text-primary mb-4">Career Explorer</h2>
        <form onSubmit={handleSearch} className="flex gap-2 max-w-lg mx-auto mb-8">
            <Input
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Search careers, e.g., 'Software Engineer', 'Medicine', 'Creative Arts'"
          className="h-11" />

            <Button type="submit" className="h-11 bg-primary-blue hover:bg-primary-blue-deep" disabled={isSearching}>
                {isSearching ? <Loader2 className="w-4 h-4 animate-spin" /> : <Search className="w-4 h-4" />}
            </Button>
        </form>

        {isSearching && <div className="text-center"><Loader2 className="w-8 h-8 animate-spin text-primary-blue mx-auto" /></div>}
        
        {searchResults &&
      <div className="space-y-6">
                {searchResults.careers.map((career) =>
        <Card key={career.name} className="bg-white/80">
                        <CardHeader>
                            <CardTitle>{career.name}</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <p className="text-text-secondary mb-4">{career.description}</p>
                            <h4 className="font-semibold mb-2">Key Skills:</h4>
                            <div className="flex flex-wrap gap-2 mb-4">
                                {career.key_skills.map((skill) => <div key={skill} className="px-2 py-1 bg-slate-100 text-slate-700 rounded-md text-xs">{skill}</div>)}
                            </div>
                            {career.sub_careers?.length > 0 &&
            <>
                                    <h4 className="font-semibold mb-2">Related Fields:</h4>
                                    <div className="flex flex-wrap gap-2">
                                        {career.sub_careers.map((sub) => <div key={sub} className="px-2 py-1 bg-blue-100 text-blue-700 rounded-md text-xs">{sub}</div>)}
                                    </div>
                                </>
            }
                        </CardContent>
                    </Card>
        )}
            </div>
      }
    </div>);

}

export default function CareerAssessmentPage() {
  const [assessments, setAssessments] = useState([]);
  const [currentAssessment, setCurrentAssessment] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [isCompleted, setIsCompleted] = useState(false);
  const [assessmentResults, setAssessmentResults] = useState(null);
  const [user, setUser] = useState(null);

  useEffect(() => {
    loadAssessments();
    loadUser();
  }, []);

  const loadAssessments = async () => {
    try {
      const data = await CareerAssessment.list();
      setAssessments(data);
    } catch (error) {
      console.error("Error loading assessments:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadUser = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
    } catch (error) {}
  };

  const startAssessment = (assessment) => {
    setCurrentAssessment(assessment);
    setCurrentQuestion(0);
    setAnswers({});
    setIsCompleted(false);
    setAssessmentResults(null);
  };

  const handleAnswer = (questionIndex, answerIndex) => {
    setAnswers({ ...answers, [questionIndex]: answerIndex });
  };

  const nextQuestion = () => {
    if (currentQuestion < currentAssessment.questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      completeAssessment();
    }
  };

  const completeAssessment = async () => {
    const scores = processAssessmentResults();
    setAssessmentResults(scores);

    try {
      await CareerProfile.create({
        education_level: "high_school",
        current_phase: "exploration",
        assessment_scores: { [currentAssessment.assessment_type]: scores }
      });
      setIsCompleted(true);
    } catch (error) {
      console.error("Error saving assessment results:", error);
    }
  };

  const processAssessmentResults = () => {
    const categoryScores = {};
    currentAssessment.questions.forEach((question, index) => {
      const category = question.category;
      if (!categoryScores[category]) categoryScores[category] = 0;
      if (answers[index] !== undefined) categoryScores[category]++;
    });
    return categoryScores;
  };

  if (isLoading) {
    return <div className="p-8 text-center animate-pulse">Loading Career Assessments...</div>;
  }

  if (currentAssessment && !isCompleted) {
    const progress = (currentQuestion + 1) / currentAssessment.questions.length * 100;
    const question = currentAssessment.questions[currentQuestion];

    return (
      <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
        <div className="max-w-3xl mx-auto">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <h1 className="text-2xl font-bold text-text-primary">{currentAssessment.title}</h1>
                <span className="text-text-secondary">{currentQuestion + 1} / {currentAssessment.questions.length}</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>

            <Card className="shadow-lg border-0 bg-white/60 backdrop-blur-lg">
              <CardContent className="p-8">
                <h2 className="text-xl font-semibold mb-6 text-text-primary">{question.question}</h2>
                <div className="space-y-3">
                  {question.options.map((option, index) =>
                  <button key={index} onClick={() => handleAnswer(currentQuestion, index)} className={`w-full p-4 text-left rounded-lg border-2 transition-all ${answers[currentQuestion] === index ? 'border-primary-blue bg-blue-50 text-primary-blue' : 'border-slate-200 hover:border-slate-300'}`}>
                      {option}
                    </button>
                  )}
                </div>
                <div className="mt-8 flex justify-end">
                  <Button onClick={nextQuestion} disabled={answers[currentQuestion] === undefined} className="bg-primary-blue hover:bg-primary-blue-deep">
                    {currentQuestion === currentAssessment.questions.length - 1 ? 'Complete' : 'Next'}
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>);

  }

  if (isCompleted) {
    return (
      <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
        <div className="max-w-3xl mx-auto">
          <motion.div initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }}>
            <Card className="shadow-lg border-0 bg-white/60 backdrop-blur-lg text-center">
              <CardContent className="p-12">
                <CheckCircle className="w-16 h-16 mx-auto mb-4 text-green-500" />
                <h1 className="text-3xl font-bold text-text-primary mb-4">Assessment Completed!</h1>
                <p className="text-text-secondary mb-8">Your responses have been saved. Now, explore careers that match your profile or talk to a professional.</p>
                 <Link to={createPageUrl("Mentors")}>
                    <Button variant="outline" className="gap-2">
                        <Users className="w-4 h-4" />
                        Ask a Career Counsellor
                    </Button>
                </Link>
              </CardContent>
            </Card>
            <CareerExplorer assessmentResults={assessmentResults} />
          </motion.div>
        </div>
      </div>);

  }

  return (
    <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
      <div className="max-w-6xl mx-auto">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <Brain className="w-8 h-8 text-primary-blue" />
            <h1 className="text-3xl md:text-4xl font-bold text-text-primary">Career Assessment</h1>
          </div>
          <p className="text-text-secondary text-lg">Discover your interests, strengths, and ideal career paths.</p>
        </motion.div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {assessments.map((assessment, index) =>
          <motion.div key={assessment.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 * index }}>
              <Card className="h-full shadow-lg border-0 bg-white/60 backdrop-blur-lg hover:shadow-xl transition-all duration-300">
                <CardHeader>
                  <div className="flex items-center gap-3 mb-2"><Target className="w-6 h-6 text-primary-blue" /><CardTitle className="text-xl font-bold">{assessment.title}</CardTitle></div>
                  <p className="text-text-secondary">{assessment.description}</p>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center gap-2 mb-4 text-sm text-text-secondary"><Clock className="w-4 h-4" /><span>{assessment.duration_minutes} minutes</span></div>
                  <Button onClick={() => startAssessment(assessment)} className="bg-primary-blue text-slate-900 px-4 py-2 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-10 w-full hover:bg-primary-blue-deep" disabled={!user}>
                    {user ? 'Start Assessment' : 'Login to Start'}
                  </Button>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </div>
      </div>
    </div>);

}
