import React, { useState, useEffect } from "react";
import { Mentor } from "@/entities/Mentor";
import { motion } from "framer-motion";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Users, Search, Award } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";

import MentorCard from "../components/mentors/MentorCard";
import BookingForm from "../components/booking/BookingForm";

export default function MentorsPage() {
  const [mentors, setMentors] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [expertiseFilter, setExpertiseFilter] = useState("All");
  const [selectedMentor, setSelectedMentor] = useState(null);
  const [isBookingOpen, setIsBookingOpen] = useState(false);

  useEffect(() => {
    loadMentors();
  }, []);

  const loadMentors = async () => {
    setIsLoading(true);
    try {
      const data = await Mentor.list();
      setMentors(data);
    } catch (error) {
      console.error("Error loading mentors:", error);
    }
    setIsLoading(false);
  };

  const handleBookSession = (mentor) => {
    setSelectedMentor(mentor);
    setIsBookingOpen(true);
  };

  const allExpertise = ["All", ...new Set(mentors.flatMap(m => m.expertise))];

  const filteredMentors = mentors.filter(mentor => {
    const nameMatch = mentor.name.toLowerCase().includes(searchTerm.toLowerCase());
    const headlineMatch = mentor.headline.toLowerCase().includes(searchTerm.toLowerCase());
    const expertiseMatch = expertiseFilter === "All" || mentor.expertise.includes(expertiseFilter);
    return (nameMatch || headlineMatch) && expertiseMatch;
  });

  return (
    <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
      <div className="max-w-7xl mx-auto">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <Users className="w-8 h-8 text-primary-blue"/>
            <h1 className="text-3xl md:text-4xl font-bold text-text-primary">Find Your Mentor</h1>
          </div>
          <p className="text-text-secondary text-lg">Connect with experts to guide your exam preparation journey.</p>
        </motion.div>

        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="mb-8 p-4 bg-white/60 backdrop-blur-lg rounded-2xl shadow-sm border border-slate-200/80">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="relative md:col-span-2">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-400" />
              <Input
                placeholder="Search by name or expertise (e.g., 'Physics')"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 h-11"
              />
            </div>
            <div className="p-1 rounded-xl bg-slate-100 flex gap-1 overflow-x-auto">
              {allExpertise.slice(0, 5).map(expertise => (
                <button
                  key={expertise}
                  onClick={() => setExpertiseFilter(expertise)}
                  className={`flex-shrink-0 transition-all duration-300 px-3 py-1.5 rounded-lg text-sm font-semibold w-full ${
                    expertiseFilter === expertise 
                      ? "bg-white text-primary-blue shadow-sm" 
                      : "text-text-secondary hover:bg-slate-200/50"
                  }`}
                >
                  {expertise}
                </button>
              ))}
            </div>
          </div>
        </motion.div>

        {isLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-80 bg-slate-200 rounded-2xl animate-pulse"></div>
            ))}
          </div>
        ) : filteredMentors.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredMentors.map((mentor, index) => (
              <motion.div key={mentor.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 * index }}>
                <MentorCard mentor={mentor} onBookSession={handleBookSession} />
              </motion.div>
            ))}
          </div>
        ) : (
          <div className="text-center py-16 bg-white/60 rounded-2xl">
            <Award className="w-16 h-16 mx-auto mb-4 text-slate-400" />
            <h3 className="text-xl font-semibold text-text-primary">No Mentors Found</h3>
            <p className="text-text-secondary">Try adjusting your search filters.</p>
          </div>
        )}

        <Dialog open={isBookingOpen} onOpenChange={setIsBookingOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Book Session with {selectedMentor?.name}</DialogTitle>
            </DialogHeader>
            {selectedMentor && (
              <BookingForm 
                mentor={selectedMentor}
                onBookingSuccess={() => {
                  setIsBookingOpen(false);
                  setSelectedMentor(null);
                }}
              />
            )}
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
