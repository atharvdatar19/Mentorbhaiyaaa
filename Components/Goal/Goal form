import React, { useState, useEffect } from 'react';
import { Goal } from '@/entities/Goal';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus, Trash2 } from 'lucide-react';

export default function GoalForm({ goal, onSubmitSuccess }) {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: 'academic',
    target_date: '',
    priority: 'medium',
    status: 'not_started',
    progress_percentage: 0,
    milestones: [],
  });
  const [newMilestone, setNewMilestone] = useState('');

  useEffect(() => {
    if (goal) {
      setFormData({
        ...goal,
        target_date: new Date(goal.target_date).toISOString().split('T')[0],
        milestones: goal.milestones || [],
      });
    }
  }, [goal]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name, value) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddMilestone = () => {
    if (newMilestone.trim() === '') return;
    const milestone = { title: newMilestone, completed: false, due_date: null };
    setFormData(prev => ({ ...prev, milestones: [...prev.milestones, milestone] }));
    setNewMilestone('');
  };

  const handleRemoveMilestone = (index) => {
    setFormData(prev => ({
      ...prev,
      milestones: prev.milestones.filter((_, i) => i !== index),
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (goal) {
        await Goal.update(goal.id, formData);
      } else {
        await Goal.create(formData);
      }
      onSubmitSuccess();
    } catch (error) {
      console.error('Failed to save goal:', error);
      alert('Error saving goal. Please check the console.');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Input name="title" placeholder="Goal Title" value={formData.title} onChange={handleChange} required />
      <Textarea name="description" placeholder="Description" value={formData.description} onChange={handleChange} />
      <div className="grid grid-cols-2 gap-4">
        <Select name="category" value={formData.category} onValueChange={(v) => handleSelectChange('category', v)}>
          <SelectTrigger><SelectValue /></SelectTrigger>
          <SelectContent>
            <SelectItem value="academic">Academic</SelectItem>
            <SelectItem value="skill">Skill</SelectItem>
            <SelectItem value="career">Career</SelectItem>
            <SelectItem value="personal">Personal</SelectItem>
          </SelectContent>
        </Select>
        <Input type="date" name="target_date" value={formData.target_date} onChange={handleChange} required />
      </div>
      <div className="grid grid-cols-2 gap-4">
        <Select name="priority" value={formData.priority} onValueChange={(v) => handleSelectChange('priority', v)}>
          <SelectTrigger><SelectValue /></SelectTrigger>
          <SelectContent>
            <SelectItem value="low">Low</SelectItem>
            <SelectItem value="medium">Medium</SelectItem>
            <SelectItem value="high">High</SelectItem>
          </SelectContent>
        </Select>
        <Select name="status" value={formData.status} onValueChange={(v) => handleSelectChange('status', v)}>
          <SelectTrigger><SelectValue /></SelectTrigger>
          <SelectContent>
            <SelectItem value="not_started">Not Started</SelectItem>
            <SelectItem value="in_progress">In Progress</SelectItem>
            <SelectItem value="completed">Completed</SelectItem>
            <SelectItem value="on_hold">On Hold</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div>
        <label className="text-sm font-medium">Milestones</label>
        <div className="space-y-2">
            {formData.milestones.map((milestone, index) => (
                <div key={index} className="flex items-center gap-2">
                    <Input value={milestone.title} readOnly className="bg-slate-100" />
                    <Button type="button" variant="ghost" size="icon" onClick={() => handleRemoveMilestone(index)}>
                        <Trash2 className="w-4 h-4 text-red-500" />
                    </Button>
                </div>
            ))}
            <div className="flex items-center gap-2">
                <Input 
                    placeholder="New milestone..." 
                    value={newMilestone}
                    onChange={e => setNewMilestone(e.target.value)}
                />
                <Button type="button" size="icon" onClick={handleAddMilestone}><Plus className="w-4 h-4" /></Button>
            </div>
        </div>
      </div>
      <div>
        <label className="text-sm font-medium">Progress: {formData.progress_percentage}%</label>
        <Input type="range" name="progress_percentage" min="0" max="100" value={formData.progress_percentage} onChange={handleChange} />
      </div>
      <Button type="submit" className="w-full bg-primary-blue hover:bg-primary-blue-deep">{goal ? 'Update Goal' : 'Create Goal'}</Button>
    </form>
  );
}
