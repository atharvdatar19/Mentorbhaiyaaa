import React, { useState, useEffect } from 'react';
import { StudySession, QuizAttempt } from '@/entities/all';
import { motion } from 'framer-motion';
import { BarChart, LineChart, PieChart, TrendingUp, BookOpen, Brain, CheckCircle } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ResponsiveContainer, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line, Pie } from 'recharts';
import { format, eachDayOfInterval, startOfWeek, endOfWeek, subDays } from 'date-fns';

const aggregateDataByDay = (sessions) => {
    const dailyTotals = sessions.reduce((acc, session) => {
      const day = format(new Date(session.created_date), 'yyyy-MM-dd');
      acc[day] = (acc[day] || 0) + session.duration_minutes;
      return acc;
    }, {});
  
    const weekStart = startOfWeek(new Date(), { weekStartsOn: 1 });
    const weekEnd = endOfWeek(new Date(), { weekStartsOn: 1 });
    const daysInWeek = eachDayOfInterval({ start: weekStart, end: weekEnd });
  
    return daysInWeek.map(day => {
      const formattedDay = format(day, 'yyyy-MM-dd');
      return {
        name: format(day, 'EEE'),
        studyTime: dailyTotals[formattedDay] || 0
      };
    });
};

const aggregateScoresBySubject = (attempts) => {
    const subjectStats = attempts.reduce((acc, attempt) => {
      if (!acc[attempt.subject]) {
        acc[attempt.subject] = { totalScore: 0, count: 0 };
      }
      acc[attempt.subject].totalScore += attempt.score;
      acc[attempt.subject].count++;
      return acc;
    }, {});
  
    return Object.entries(subjectStats).map(([name, data]) => ({
      name,
      avgScore: Math.round(data.totalScore / data.count)
    }));
};

export default function ProgressPage() {
  const [sessions, setSessions] = useState([]);
  const [attempts, setAttempts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const [sessionsData, attemptsData] = await Promise.all([
          StudySession.list('-created_date', 100),
          QuizAttempt.list('-created_date', 100),
        ]);
        setSessions(sessionsData);
        setAttempts(attemptsData);
      } catch (error) {
        console.error('Failed to load progress data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, []);

  const weeklyStudyData = aggregateDataByDay(sessions);
  const subjectPerformanceData = aggregateScoresBySubject(attempts);
  
  const totalStudyTime = sessions.reduce((sum, s) => sum + s.duration_minutes, 0);
  const testsCompleted = attempts.length;
  const avgScore = testsCompleted > 0 ? Math.round(attempts.reduce((sum, a) => sum + a.score, 0) / testsCompleted) : 0;
  
  if (isLoading) {
    return (
      <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
        <div className="max-w-7xl mx-auto">
            <div className="h-10 bg-slate-200 rounded w-1/3 mb-8 animate-pulse"></div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                {[...Array(3)].map((_, i) => <div key={i} className="h-28 bg-slate-200 rounded-2xl animate-pulse"></div>)}
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="h-80 bg-slate-200 rounded-2xl animate-pulse"></div>
                <div className="h-80 bg-slate-200 rounded-2xl animate-pulse"></div>
            </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center gap-3 mb-8">
          <TrendingUp className="w-8 h-8 text-primary-blue" />
          <h1 className="text-3xl md:text-4xl font-bold text-text-primary">My Progress</h1>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <StatCard icon={BookOpen} title="Total Study Time" value={`${Math.floor(totalStudyTime/60)}h ${totalStudyTime%60}m`} />
            <StatCard icon={Brain} title="Tests Completed" value={testsCompleted} />
            <StatCard icon={CheckCircle} title="Overall Average Score" value={`${avgScore}%`} />
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <ChartCard title="Weekly Study Hours" icon={BarChart}>
                <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={weeklyStudyData}>
                        <CartesianGrid strokeDasharray="3 3" vertical={false} />
                        <XAxis dataKey="name" tick={{fontSize: 12}}/>
                        <YAxis tick={{fontSize: 12}} label={{ value: 'Minutes', angle: -90, position: 'insideLeft', offset: 10, style: {fontSize: 12} }}/>
                        <Tooltip />
                        <Bar dataKey="studyTime" name="Study Time (min)" fill="#1e40af" radius={[4, 4, 0, 0]}/>
                    </BarChart>
                </ResponsiveContainer>
            </ChartCard>

            <ChartCard title="Average Score by Subject" icon={LineChart}>
                 <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={subjectPerformanceData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" tick={{fontSize: 12}}/>
                        <YAxis domain={[0, 100]} tick={{fontSize: 12}} label={{ value: 'Avg Score %', angle: -90, position: 'insideLeft', offset: 10, style: {fontSize: 12} }}/>
                        <Tooltip />
                        <Line type="monotone" dataKey="avgScore" name="Avg Score" stroke="#0d9488" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 6 }}/>
                    </LineChart>
                </ResponsiveContainer>
            </ChartCard>
        </div>
      </div>
    </div>
  );
}

const StatCard = ({ icon: Icon, title, value }) => (
    <Card className="shadow-lg border-0 bg-white/60 backdrop-blur-lg">
        <CardContent className="p-6 flex items-center gap-4">
            <div className="p-3 bg-blue-100 rounded-lg"><Icon className="w-6 h-6 text-primary-blue" /></div>
            <div>
                <p className="text-sm text-text-secondary font-medium">{title}</p>
                <p className="text-2xl font-bold text-text-primary">{value}</p>
            </div>
        </CardContent>
    </Card>
)

const ChartCard = ({ title, icon: Icon, children }) => (
    <Card className="shadow-lg border-0 bg-white/60 backdrop-blur-lg">
        <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
                <Icon className="w-5 h-5 text-primary-blue" />
                {title}
            </CardTitle>
        </CardHeader>
        <CardContent>
            {children}
        </CardContent>
    </Card>
)
