
import React, { useState, useEffect, useCallback } from "react";
import { College } from "@/entities/College";
import { User } from "@/entities/User";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { MapPin, Search, GraduationCap, Users, Wifi, Book, Home, Utensils } from "lucide-react";

export default function CollegeDirectoryPage() {
  const [colleges, setColleges] = useState([]);
  const [filteredColleges, setFilteredColleges] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedStream, setSelectedStream] = useState("All");
  const [selectedType, setSelectedType] = useState("All");
  const [userLocation, setUserLocation] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  const filterColleges = useCallback(() => {
    let filtered = colleges;

    if (searchTerm) {
      filtered = filtered.filter(college =>
        college.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        college.location.city.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedStream !== "All") {
      filtered = filtered.filter(college =>
        college.programs_offered.some(program => program.stream === selectedStream)
      );
    }

    if (selectedType !== "All") {
      filtered = filtered.filter(college => college.type === selectedType);
    }

    setFilteredColleges(filtered);
  }, [colleges, searchTerm, selectedStream, selectedType]); // Dependencies for useCallback

  useEffect(() => {
    loadColleges();
    loadUserLocation();
  }, []);

  useEffect(() => {
    filterColleges(); // Now filterColleges is a stable reference thanks to useCallback
  }, [filterColleges]); // Dependency for useEffect is the memoized function

  const loadColleges = async () => {
    try {
      const data = await College.list();
      setColleges(data);
      // No need to set filteredColleges here initially, as the useEffect for filterColleges will run
    } catch (error) {
      console.error("Error loading colleges:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadUserLocation = async () => {
    try {
      const user = await User.me();
      setUserLocation(user.location);
    } catch (error) {
      console.error("User not logged in");
    }
  };

  const facilityIcons = {
    hostel: Home,
    library: Book,
    lab: GraduationCap,
    internet: Wifi,
    canteen: Utensils
  };

  const typeColors = {
    government: "bg-green-100 text-green-800",
    private: "bg-blue-100 text-blue-800",
    autonomous: "bg-purple-100 text-purple-800"
  };

  if (isLoading) {
    return (
      <div className="p-8 text-center">
        <div className="animate-pulse">Loading College Directory...</div>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8 min-h-screen bg-soft-bg">
      <div className="max-w-7xl mx-auto">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <GraduationCap className="w-8 h-8 text-primary-blue"/>
            <h1 className="text-3xl md:text-4xl font-bold text-text-primary">College Directory</h1>
          </div>
          <p className="text-text-secondary text-lg">
            Find the best government and private colleges near you with detailed information.
          </p>
        </motion.div>

        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="mb-8">
          <Card className="p-4 bg-white/60 backdrop-blur-lg">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-400" />
                <Input
                  placeholder="Search colleges or cities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              <Select value={selectedStream} onValueChange={setSelectedStream}>
                <SelectTrigger>
                  <SelectValue placeholder="Select Stream" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="All">All Streams</SelectItem>
                  <SelectItem value="Arts">Arts</SelectItem>
                  <SelectItem value="Science">Science</SelectItem>
                  <SelectItem value="Commerce">Commerce</SelectItem>
                  <SelectItem value="Vocational">Vocational</SelectItem>
                  <SelectItem value="Engineering">Engineering</SelectItem>
                  <SelectItem value="Medical">Medical</SelectItem>
                </SelectContent>
              </Select>
              <Select value={selectedType} onValueChange={setSelectedType}>
                <SelectTrigger>
                  <SelectValue placeholder="College Type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="All">All Types</SelectItem>
                  <SelectItem value="government">Government</SelectItem>
                  <SelectItem value="private">Private</SelectItem>
                  <SelectItem value="autonomous">Autonomous</SelectItem>
                </SelectContent>
              </Select>
              <Button className="bg-primary-blue hover:bg-primary-blue-deep">
                <MapPin className="w-4 h-4 mr-2" />
                Near Me
              </Button>
            </div>
          </Card>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredColleges.map((college, index) => (
            <motion.div
              key={college.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.05 * index }}
            >
              <Card className="h-full shadow-lg border-0 bg-white/60 backdrop-blur-lg hover:shadow-xl transition-all duration-300">
                <CardHeader>
                  <div className="flex justify-between items-start mb-2">
                    <CardTitle className="text-lg font-bold text-text-primary line-clamp-2">{college.name}</CardTitle>
                    <Badge className={`text-xs ${typeColors[college.type]}`}>
                      {college.type}
                    </Badge>
                  </div>
                  <div className="flex items-center gap-1 text-text-secondary">
                    <MapPin className="w-4 h-4" />
                    <span className="text-sm">{college.location.city}, {college.location.state}</span>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h4 className="font-semibold text-text-primary mb-2 text-sm">Programs Offered</h4>
                    <div className="flex flex-wrap gap-1">
                      {college.programs_offered.slice(0, 3).map((program, i) => (
                        <Badge key={i} variant="outline" className="text-xs">
                          {program.degree} ({program.stream})
                        </Badge>
                      ))}
                      {college.programs_offered.length > 3 && (
                        <Badge variant="outline" className="text-xs">
                          +{college.programs_offered.length - 3} more
                        </Badge>
                      )}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold text-text-primary mb-2 text-sm">Facilities</h4>
                    <div className="flex gap-2">
                      {Object.entries(college.facilities).map(([facility, available]) => {
                        const IconComponent = facilityIcons[facility] || Users;
                        return available ? (
                          <div key={facility} className="p-1.5 rounded bg-green-100">
                            <IconComponent className="w-3 h-3 text-green-600" />
                          </div>
                        ) : null;
                      })}
                    </div>
                  </div>

                  <div className="pt-2 border-t border-slate-200">
                    <div className="flex justify-between items-center text-sm">
                      <span className="text-text-secondary">Est. {college.established_year}</span>
                      <span className="text-text-secondary">{college.programs_offered.length} Programs</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
}

